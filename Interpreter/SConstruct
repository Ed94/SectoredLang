#!/usr/bin/env python

# Version Enforcement
EnsureSConsVersion(3, 0, 0)
EnsurePythonVersion(3, 6)

# System Modules
import atexit
import glob
import os
import pickle
import sys
import time



Platforms           = []
Platform_Options    = {}
Platform_Flags      = {}



#region Tooling

def lldName() :
	if os.name == "nt" :
		return "lld-link"

clang    = "clang"
clang_cl = "clang-cl"
gcc      = "gcc"
msvc     = "msvc"

gnu_link = "link"
lld      = lldName()
# Link has been hjacked on my system in PATHS with devkit pro msys....

# Not working for some reason...
mslink   = "mslink"

#endregion Tooling



#region Standard Library

StdLibDirs  = []
StdLibs     = []
StdIncludes = []

if (os.name == "nt") :

	StdLibDirs.extend([
		r"C:\Program Files (x86)\Windows Kits\10\Lib\10.0.19041.0\ucrt\x64",
		r"C:\Program Files (x86)\Windows Kits\10\Lib\10.0.19041.0\um\x64",
		r"C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\lib\x64"
	])
	
	StdLibs.extend([
		"libcmt",
		"libucrt",
		# libucrtd,
		"libucrt",
		# libucrtd,
	])
	
	StdIncludes.extend(
	[
		r"C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\shared",
		r"C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt",
		r"C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\um",
		r"C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include"
	])
	
#endregion Standard Library



#region Context Units Specification

Config_Dir    = "./Config/"
PAL_Dir       = "./PAL/"
ProjDir       = "./Project/"
ThirdPartyDir = "./ThirdParty/"

Directories = [
# Config 
	Config_Dir,
# Third-Party
	ThirdPartyDir,
# ALs
	PAL_Dir,
	PAL_Dir + "LAL",
	PAL_Dir + "OSAL",
	PAL_Dir + "TPAL",
# Project
	ProjDir,
	ProjDir + "Core",
	ProjDir + "Lexer",
	ProjDir + "Parser",
	ProjDir + "Shell",
]

SourceFiles = []
for directory in Directories :
	searchStr = directory + "/*.c"
	files     = Glob(searchStr)

	SourceFiles.append(files) 
# print(SourceFiles)

# Directories.extend(StdIncludes)


# Currenlty not used, but is the entrypoint specification unit.
EntrypointFile = "./PAL/OSAL/OSAL_Entrypoint.c"

#endregion Context Units Specification



# region Third-party Libraries

LibraryDirs = []
LibraryDirs.extend(StdLibDirs)

Libraries = [
	StdLibs
]

#endregion 



#region Tooling Configuration

# Archiver (Static Library)

AR_Flags = []
AR_Msg   = "Archiving $TARGET"

# Assembler

Assembler = None;
AS_Flags  = []
Asm_Msg   = "Assembling unit $TARGET"

# C

C_Compiler      = clang
C_Msg           = "Compiling C unit $TARGET"
C_Defines       = []
C_Flags         = [
# MSVC
	# "/std:c17",
	# "-D_DEBUG"
	# "-DUNICODE",
	# "-D_UNICODE",
	# "-Z7",
# Clang / GCC
	"-std=c17", 
	"-O0",
	"-fno-limit-debug-info",
	"-gfull",
	"-DDEBUG",
	"-Wno-unused-function",
	"-Wno-unused-variable",
	"-Wno-unknown-pragmas",
	"-Wno-incompatible-pointer-types-discards-qualifiers",
	# "-E",
# Any
	"-Wall", 
	# '-Werror'
]
C_Suffixes = [
	".h",
	".c"
]

# C++

Cpp_Compiler    = None
Cpp_Msg         = "Compiling C++ unit $TARGET"
Cpp_Defines 	= []

Cpp_Suffixes = [
	".hpp",
".cpp",
	".tpp"
]
 
# C/C++
Cxx_Flags 		= [
]
Cpp_Flags 		= [
	# "-std=c++17",
	# '-Wall',
	# '-Werror',
]

# Linker

Linker          = lld
Link_Msg        = "Linking $TARGET"
Link_Flags      = [
]

#endregion Tooling Configuration



#region Build Environment

Env = Environment()

Env.Tool(C_Compiler)
Env.PrependENVPath("PATH", os.getenv("PATH"))

Env.Replace \
(
	# Archive
	# ARFLAGS    = AR_Flags,
	ARCOMSTR   = AR_Msg,
	
	# C
	CC          = C_Compiler,
	CFLAGS      = C_Flags ,
	CFILESUFFIX = C_Suffixes,
	CPPPATH     = Directories,
	CCCOMSTR    = C_Msg,
	
	# C++
	CXX           = Cpp_Compiler,
	CXXCOMSTR     = Cpp_Msg,
	CXXFILESUFFIX = Cpp_Suffixes,
	
	# C/C++
	CCFLAGS  = Cxx_Flags,
	CXXFLAGS = Cpp_Flags,
	CPPFLAGS = C_Defines,

	# Libraries
	LIBS       = Libraries,
	LIBPATH    = LibraryDirs,

	# Linker
	LINK       = Linker,
	LINKCOMSTR = Link_Msg,
	# LINKFLAGS  = Link_Flags
)


#region Release Env

# EnvRelease = Env.clone()

#endregion Release Env


#region Debug Env

# EnvDebug = Env.clone()

#endregion Debug Env


# Name of the program binary
targetName  = "masi"
buildPath   = "./Binaries/"

# VariantDir(buildPath, ProjDir)

#endregion  Build Environment


	
#region Environment Specific

# Platform Specific stuff
# if platform.system() == 'Linux':

# Dump the environment configuraiton
# print(Env.Dump())

#endregion Environment Specific



#region Building

#region GoFast     https://github.com/SCons/scons/wiki/GoFastButton
# Env.Decider('MD5-timestamp')
# MaxDriftValue = 2

# SetOption("max-drift", MaxDriftValue)
# SetOption("implicit-deps-unchanged", 1)

SetOption("implicit_cache", 1)
#endregion GoFast
	

# Build default target
defaultTarget = Env.Program(targetName, SourceFiles)

# Set the default target as the default build target
Default(defaultTarget)

# Arrange for the program to be copied into a destination directory
# Env.Install(buildPath, defaultTarget)

# Setup a cli arg for specifing the build (install) path.
# Env.Alias('default', buildPath)

#endregion Building

# print(Env.Dump())
