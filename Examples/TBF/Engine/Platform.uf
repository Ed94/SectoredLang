if Win32 {

KeyCode enum (u32)
{
	alias WinUser = LP.OS.Win32.WinUser

	None       = 0x00
	ArrowUp    = WinUser.VK_UP
	ArrowDown  = WinUser.VK_DOWN
	ArrowLeft  = WinUser.VK_LEFT
	ArrowRight = WinUser.VK_Right
	Enter      = WinUser.VK_RETURN
	Tab        = WinUser.VK_TAB
}

GetKeySignal (KeyCode key) -> bool exe ret GetAsyncKeyState(key) & 0x8000

Console
{
	AttributeFlag
	{
		enum (u16)
		{
			Foreground_Blue      = bit(0)
			Foreground_Green     = bit(1)
			Foreground_Red       = bit(2)
			Foreground_Intensity = bit(3)

			Background_Blue      = bit(4)
			Background_Green     = bit(5)
			Background_Red       = bit(6)
			Background_Intensity = bit(7)
		}
	}

	Cell type Win32.CHAR_INFO

	tt static WhiteCell : u16 = 
		  AttributeFlag.Foreground_Red 
		| AttirbuteFlag.Foreground_Green 
		| AttributeFlag.Foreground_Blue 
		| AttributeFlag.Foreground_Intensity

	static 
	{
		Buffer : ptr Cell

		WindowHandle : Win32.HWND
		OutputHandle : Win32.HANDLE

		CoordSize  : Win32.COORD
		SBI        : Win32.CONSOLE_SCREEN_BUFFER_INFO
		BufferSize : Win32.DWORD
		Size       : Win32.SMALL_RECT

		CursorSettings : Win32.CONSOLE_CURSOR_INFO
	}

	tt static ScreenPos_00 : Win32.COORD = 0,0


	() -> bool
	{
		IOBuffer {
			Bind exe
			Unbind exe
		}

		(char : u16, length : Win32.DWORD, writeCoord : Win32.COORD, numCharsWritter : Win32.LPDWORD)
		FillConsoleOutputCharacter exe ret Win32.FillConsoleOutputCharacter(
			OutputHandle,
			char,
			length,
			writeCoord,
			numCharsWritter
		)

		(attribute : Win32.WORD, length : Win32.DWORD, writeCoord : Win32.COORD, numAttrsWritten : Win32.LPDWORD)
		FillConsoleOutputAttribute exe ret Win32.FillConsoleOutputAttribute(
			OutputHandle,
			attribute,
			length,
			writeCoord,
			numAttrsWritten
		)

		Request exe
		{
			check(Win32.AllocConsole, "Failed to get console for rendering from operating system")
			check(Bind_IOBuffer,      "Failed to bind standard IO to renderer's console")
		}

		SetCursorInfo       (info : Win32.CONSOLE_CURSOR_INFO) exe

		SetCursorPosition   (position : Win32.COORD) exe
		
		SetScreenBufferSize (size : Win32.COORD) exe

		SetWindowInfo       (bAbsolute : bool, window : ptr Win32.SMALL_RECT) exe

		SetCursorPosition   (position : Win32.COORD) exe Win32.SetConsoleCursorPosition(OutputHandle, position)

		SetWindowPos(
			 X,  Y : s32
			CX, CY : s32, 
			uFlags : u32
		) exe

		SetTitle (title : string(u16)) exe ret SetConsoleTitleW(title)

		UpdateInfo exe ret GetConsoleScreenBufferInfo( OutputHandle, SBI.ptr )

		WriteOutput exe ret Win32.WriteConsoleOutputW(
			OutputHandle,
			Buffer,
			CoordSize,
			ScreenPos_00,
			Size
		)

		WriteToBufferCells (cells : ptr ro Cell, initialCell, finalCell : Win32.COORD) exe
		{
			stack 
			{
				lineOffset  : uw = initialCell.Y * CoordSize.X
				colOffset   : uw = initialCell.X
				totalOffset : uw = lineOffset - colOffset

				bufferOffset : ptr Cell = Buffer[totalOffset].ptr
				dataSize     : uw       = totalOffset
			}

			lineOffset  = finalCell.Y * CoordSize.X
			colOffset   = finalCell.X
			totalOffset = lineOffset  + colOffset
			dataSize    = totalOffset - dataSize

			if dataSize == 0
				dataSize = 1

			Memory.Format.Set(Cell, bufferOffset, cells, dataSize)
		}
	}
}



WinMain export 
(hInstance : Win32.HINSTANCE, hPrevInstance : Win32.HINSTANCE, lpCmdLine : Win32.PWSTR, nCmdShow : Win32.INT) -> Win32.INT
exe
{
	EntryPoint()
	ret 0
}

} // LP.OS.Win32
